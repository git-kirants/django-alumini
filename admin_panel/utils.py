from django.utils import timezone
from django.db.models import Count, Avg, Sum
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
from io import BytesIO
from .models import SystemMetric
from users.models import User
from events.models import Event, EventRegistration
from charitable.models import Donation, Fund
from jobs.models import JobPosting, JobApplication
from forum.models import Thread, Reply
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib import colors
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.units import inch
import psutil
import time
from django.db import connection
from django.core.cache import cache

def calculate_system_metrics():
    """Calculate and store current system metrics."""
    metrics = {
        'system_load': get_system_load(),
        'memory_usage': get_memory_usage(),
        'cpu_usage': get_cpu_usage(),
        'disk_usage': get_disk_usage(),
        'network_traffic': get_network_traffic(),
        'db_query_rate': get_db_query_rate(),
        'cache_hit_rate': get_cache_hit_rate(),
        'error_rate': get_error_rate(),
        'avg_response_time': get_avg_response_time(),
    }
    
    # Store metrics in the database
    timestamp = timezone.now()
    for name, value in metrics.items():
        SystemMetric.objects.create(
            metric_name=name,
            value=value,
            timestamp=timestamp
        )
    
    return metrics

def generate_pdf_report(report, data):
    """Generate PDF report based on type and data."""
    buffer = BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=letter, rightMargin=72, leftMargin=72, topMargin=72, bottomMargin=18)
    
    # Container for the 'Flowable' objects
    elements = []
    styles = getSampleStyleSheet()
    
    # Title
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=24,
        spaceAfter=30
    )
    elements.append(Paragraph(report.title, title_style))
    elements.append(Spacer(1, 12))
    
    # Metadata
    elements.append(Paragraph(f"Generated by: {report.generated_by.get_full_name()}", styles["Normal"]))
    elements.append(Paragraph(f"Date Range: {report.start_date} to {report.end_date}", styles["Normal"]))
    elements.append(Spacer(1, 20))
    
    # Report content based on type
    if report.report_type == 'user_activity':
        elements.extend(_format_user_activity(data, styles))
    elif report.report_type == 'event_stats':
        elements.extend(_format_event_stats(data, styles))
    elif report.report_type == 'donation_summary':  # Updated to match form value
        elements.extend(_format_donation_summary(data, styles))
    elif report.report_type == 'job_stats':
        elements.extend(_format_job_stats(data, styles))
    elif report.report_type == 'system_metrics':
        elements.extend(_format_system_metrics(data, styles))
    
    # Build PDF
    doc.build(elements)
    buffer.seek(0)
    return buffer

def _format_user_activity(data, styles):
    """Format user activity data for PDF report."""
    elements = []
    
    # Summary section
    elements.append(Paragraph("User Activity Summary", styles['Heading2']))
    elements.append(Spacer(1, 12))
    
    # Create table data
    table_data = [
        ['Metric', 'Value'],
        ['Total Users', data['total_users']],
        ['New Users', data['new_users']],
        ['Active Users', data['active_users']],
    ]
    
    # Add user types breakdown
    elements.append(Paragraph("User Types Distribution", styles['Heading3']))
    for user_type, count in data['user_types'].items():
        table_data.append([f"{user_type} Users", count])
    
    # Create and style the table
    table = Table(table_data, colWidths=[4*inch, 2*inch])
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 14),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('TEXTCOLOR', (0, 1), (-1, -1), colors.black),
        ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 1), (-1, -1), 12),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    
    elements.append(table)
    return elements

def generate_user_activity_report(start_date, end_date):
    """Generate user activity report data"""
    return {
        'total_users': User.objects.count(),
        'new_users': User.objects.filter(date_joined__range=[start_date, end_date]).count(),
        'active_users': User.objects.filter(last_login__range=[start_date, end_date]).count(),
        'user_types': dict(User.objects.values_list('user_type').annotate(count=Count('id'))),
    }

def generate_event_stats_report(start_date, end_date):
    """Generate event statistics report data"""
    events = Event.objects.filter(date__range=[start_date, end_date])
    return {
        'total_events': events.count(),
        'total_registrations': EventRegistration.objects.filter(event__in=events).count(),
        'event_types': dict(events.values_list('event_type').annotate(count=Count('id'))),
        'avg_attendance': EventRegistration.objects.filter(event__in=events).count() / max(events.count(), 1),
    }

def generate_donation_report(start_date, end_date):
    """Generate donation summary report data"""
    donations = Donation.objects.filter(donation_date__range=[start_date, end_date])
    return {
        'total_donations': donations.count(),
        'total_amount': donations.aggregate(Sum('amount'))['amount__sum'] or 0,
        'avg_donation': donations.aggregate(Avg('amount'))['amount__avg'] or 0,
        'funds': dict(donations.values_list('fund__name').annotate(count=Count('id'))),
    }

def generate_job_stats_report(start_date, end_date):
    """Generate job statistics report data"""
    jobs = JobPosting.objects.filter(created_at__range=[start_date, end_date])
    return {
        'total_jobs': jobs.count(),
        'total_applications': JobApplication.objects.filter(job__in=jobs).count(),
        'job_types': dict(jobs.values_list('job_type').annotate(count=Count('id'))),
        'avg_applications': JobApplication.objects.filter(job__in=jobs).count() / max(jobs.count(), 1),
    }

def generate_system_metrics_report(start_date, end_date):
    """Generate system metrics report data"""
    metrics = SystemMetric.objects.filter(timestamp__range=[start_date, end_date])
    return {
        'user_metrics': dict(metrics.filter(metric_name__in=['total_users', 'active_users']).values_list('metric_name', 'value')),
        'performance_metrics': dict(metrics.filter(metric_name='response_time').values_list('timestamp', 'value')),
        'avg_response_time': metrics.filter(metric_name='response_time').aggregate(Avg('value'))['value__avg'] or 0,
    }

def get_system_load():
    """Get system CPU load as a percentage."""
    return psutil.cpu_percent(interval=1)

def get_memory_usage():
    """Get memory usage in GB."""
    memory = psutil.virtual_memory()
    return memory.used / (1024 * 1024 * 1024)  # Convert to GB

def get_cpu_usage():
    """Get CPU usage percentage."""
    return psutil.cpu_percent(interval=1)

def get_disk_usage():
    """Get disk usage percentage."""
    disk = psutil.disk_usage('/')
    return disk.percent

def get_network_traffic():
    """Get current network traffic in bytes/sec."""
    net_io = psutil.net_io_counters()
    time.sleep(1)
    net_io_after = psutil.net_io_counters()
    return (net_io_after.bytes_sent + net_io_after.bytes_recv - 
            net_io.bytes_sent - net_io.bytes_recv)

def get_db_query_rate():
    """Get database queries per second (approximate)."""
    initial_queries = len(connection.queries)
    time.sleep(1)
    return len(connection.queries) - initial_queries

def get_cache_hit_rate():
    """Get cache hit rate percentage (simulated for development)."""
    try:
        # For development, return a simulated cache hit rate
        return 85.0  # Simulated 85% cache hit rate
    except Exception:
        return 0.0

def get_error_rate():
    """Get error rate from logs (simulated for development)."""
    return 0.5  # Simulated 0.5% error rate

def get_avg_response_time():
    """Get average response time in milliseconds (simulated for development)."""
    return 200  # Simulated 200ms response time

def get_metric_change(metric_name):
    """Calculate the percentage change for a metric."""
    try:
        current = SystemMetric.objects.filter(metric_name=metric_name).order_by('-timestamp').first()
        previous = SystemMetric.objects.filter(
            metric_name=metric_name,
            timestamp__lt=current.timestamp if current else timezone.now()
        ).order_by('-timestamp').first()
        
        if current and previous and previous.value != 0:
            return ((current.value - previous.value) / previous.value) * 100
        return 0
    except Exception:
        return 0

def get_user_metrics():
    """Get user-related metrics."""
    now = timezone.now()
    thirty_days_ago = now - timezone.timedelta(days=30)
    start_of_month = now.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
    
    try:
        # Calculate metrics
        total_users = User.objects.count()
        active_users = User.objects.filter(last_login__gte=thirty_days_ago).count()
        new_users = User.objects.filter(date_joined__gte=start_of_month).count()
        
        # Calculate user type distribution
        user_types = User.objects.values('user_type').annotate(count=Count('id'))
        user_types_dict = {
            type_data['user_type']: {
                'count': type_data['count'],
                'percentage': (type_data['count'] / total_users * 100) if total_users > 0 else 0
            } for type_data in user_types
        }
        
        return {
            'total_users': total_users,
            'active_users': active_users,
            'new_users': new_users,
            'user_types': user_types_dict,
            'total_users_change': get_metric_change('total_users'),
            'active_users_change': get_metric_change('active_users'),
            'new_users_change': get_metric_change('new_users'),
            'engagement_rate': (active_users / total_users * 100) if total_users > 0 else 0,
            'engagement_rate_change': get_metric_change('engagement_rate'),
        }
    except Exception:
        # Return default values if there's an error
        return {
            'total_users': 0,
            'active_users': 0,
            'new_users': 0,
            'user_types': {},
            'total_users_change': 0,
            'active_users_change': 0,
            'new_users_change': 0,
            'engagement_rate': 0,
            'engagement_rate_change': 0,
        }

def _format_event_stats(data, styles):
    """Format event statistics for PDF report."""
    elements = []
    
    elements.append(Paragraph("Event Statistics Summary", styles['Heading2']))
    elements.append(Spacer(1, 12))
    
    table_data = [
        ['Metric', 'Value'],
        ['Total Events', data['total_events']],
        ['Total Registrations', data['total_registrations']],
        ['Average Attendance', f"{data['avg_attendance']:.1f}"],
    ]
    
    # Add event types breakdown
    elements.append(Paragraph("Event Types Distribution", styles['Heading3']))
    for event_type, count in data['event_types'].items():
        table_data.append([f"{event_type} Events", count])
    
    table = Table(table_data, colWidths=[4*inch, 2*inch])
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 14),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('TEXTCOLOR', (0, 1), (-1, -1), colors.black),
        ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 1), (-1, -1), 12),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    
    elements.append(table)
    return elements

def _format_job_stats(data, styles):
    """Format job statistics for PDF report."""
    elements = []
    
    elements.append(Paragraph("Job Statistics Summary", styles['Heading2']))
    elements.append(Spacer(1, 12))
    
    table_data = [
        ['Metric', 'Value'],
        ['Total Jobs Posted', data['total_jobs']],
        ['Total Applications', data['total_applications']],
        ['Average Applications per Job', f"{data['avg_applications']:.1f}"],
    ]
    
    # Add job types breakdown
    elements.append(Paragraph("Job Types Distribution", styles['Heading3']))
    for job_type, count in data['job_types'].items():
        table_data.append([f"{job_type} Jobs", count])
    
    table = Table(table_data, colWidths=[4*inch, 2*inch])
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 14),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('TEXTCOLOR', (0, 1), (-1, -1), colors.black),
        ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 1), (-1, -1), 12),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    
    elements.append(table)
    return elements

def _format_system_metrics(data, styles):
    """Format system metrics for PDF report."""
    elements = []
    
    elements.append(Paragraph("System Metrics Summary", styles['Heading2']))
    elements.append(Spacer(1, 12))
    
    # Performance metrics
    table_data = [
        ['Metric', 'Value'],
        ['CPU Usage', f"{data['performance_metrics'].get('cpu_usage', 0):.1f}%"],
        ['Memory Usage', f"{data['performance_metrics'].get('memory_usage', 0):.1f} GB"],
        ['Disk Usage', f"{data['performance_metrics'].get('disk_usage', 0):.1f}%"],
        ['Cache Hit Rate', f"{data['performance_metrics'].get('cache_hit_rate', 0):.1f}%"],
        ['Error Rate', f"{data['performance_metrics'].get('error_rate', 0):.2f}%"],
        ['Avg Response Time', f"{data['performance_metrics'].get('avg_response_time', 0)} ms"],
    ]
    
    table = Table(table_data, colWidths=[4*inch, 2*inch])
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 14),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('TEXTCOLOR', (0, 1), (-1, -1), colors.black),
        ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 1), (-1, -1), 12),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    
    elements.append(table)
    return elements

def _format_donation_summary(data, styles):
    """Format donation summary for PDF report."""
    elements = []
    
    # Title and summary section
    elements.append(Paragraph("Donation Summary Report", styles['Heading2']))
    elements.append(Spacer(1, 12))
    
    # Create main summary table
    table_data = [
        ['Metric', 'Value'],
        ['Total Donations', data['total_donations']],
        ['Total Amount', f"${data['total_amount']:,.2f}"],
        ['Average Donation', f"${data['avg_donation']:,.2f}"],
    ]
    
    # Create and style the main summary table
    table = Table(table_data, colWidths=[4*inch, 2*inch])
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 14),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('TEXTCOLOR', (0, 1), (-1, -1), colors.black),
        ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 1), (-1, -1), 12),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    
    elements.append(table)
    elements.append(Spacer(1, 20))
    
    # Fund distribution section
    if data['funds']:
        elements.append(Paragraph("Fund Distribution", styles['Heading3']))
        elements.append(Spacer(1, 12))
        
        fund_data = [['Fund Name', 'Number of Donations']]
        for fund_name, count in data['funds'].items():
            fund_data.append([fund_name, count])
        
        fund_table = Table(fund_data, colWidths=[4*inch, 2*inch])
        fund_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 14),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('TEXTCOLOR', (0, 1), (-1, -1), colors.black),
            ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 1), (-1, -1), 12),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        
        elements.append(fund_table)
    
    return elements 